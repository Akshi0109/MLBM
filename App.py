# -*- coding: utf-8 -*-
"""MLBM T2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11uBsaWNmGaD9FCCjVly_-M14O2ePi_Ns
"""

# Paste into a Colab cell and run:

!pip install gradio requests pandas matplotlib --quiet

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import requests
from datetime import datetime, timedelta
import gradio as gr

def get_wiki_pageviews(title, start_date, end_date):
    """
    Fetch pageview data for a Wikipedia page between two dates

    Parameters:
    - title: Wikipedia page title
    - start_date: Start date in YYYYMMDD format
    - end_date: End date in YYYYMMDD format

    Returns:
    - Dictionary with dates as keys and pageviews as values
    """
    # Clean the title to ensure it's in the correct format for the API
    title = title.replace(' ', '_')

    # API endpoint
    url = f"https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia/all-access/all-agents/{title}/daily/{start_date}/{end_date}"

    headers = {
        'User-Agent': 'WikiTrendsComparisonApp/1.0 (https://github.com/yourusername/wikitrends; your.email@example.com)'
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # Raise an exception for HTTP errors

        data = response.json()

        # Extract the pageview data
        pageviews = {}
        for item in data['items']:
            date = item['timestamp']
            date_formatted = f"{date[0:4]}-{date[4:6]}-{date[6:8]}"
            pageviews[date_formatted] = item['views']

        return pageviews

    except requests.exceptions.RequestException as e:
        if response.status_code == 404:
            return {"error": f"Page '{title}' not found or no data available for the specified time range."}
        return {"error": f"Error fetching data: {str(e)}"}

def compare_wiki_pages(url1, url2, start_date, end_date):
    """
    Compare pageview statistics for two Wikipedia pages

    Parameters:
    - url1, url2: URLs of the Wikipedia pages to compare
    - start_date, end_date: Date range in YYYY-MM-DD format

    Returns:
    - Dataframe with the comparison data
    - Plot of the comparison
    """
    # Extract page titles from URLs
    title1 = url1.split("/wiki/")[-1]
    title2 = url2.split("/wiki/")[-1]

    # Convert dates to format required by the API (YYYYMMDD)
    start_date_api = start_date.replace("-", "")
    end_date_api = end_date.replace("-", "")

    # Fetch pageview data
    pageviews1 = get_wiki_pageviews(title1, start_date_api, end_date_api)
    pageviews2 = get_wiki_pageviews(title2, start_date_api, end_date_api)

    # Check if there were any errors
    if "error" in pageviews1:
        return pd.DataFrame({"Error": [pageviews1["error"]]}), "Error: Could not fetch data for the first URL."

    if "error" in pageviews2:
        return pd.DataFrame({"Error": [pageviews2["error"]]}), "Error: Could not fetch data for the second URL."

    # Create a dataframe for comparison
    df = pd.DataFrame({
        "Date": list(pageviews1.keys()),
        f"{title1}_views": list(pageviews1.values()),
        f"{title2}_views": list(pageviews2.values())
    })

    # Sort by date
    df["Date"] = pd.to_datetime(df["Date"])
    df = df.sort_values("Date")

    # Create the plot
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(df["Date"], df[f"{title1}_views"], label=title1, marker='o', markersize=4)
    ax.plot(df["Date"], df[f"{title2}_views"], label=title2, marker='x', markersize=4)

    # Set labels and title
    ax.set_xlabel("Date")
    ax.set_ylabel("Page Views")
    ax.set_title(f"Wikipedia Page Views Comparison: {title1} vs {title2}")

    # Add a grid
    ax.grid(True, linestyle='--', alpha=0.7)

    # Add a legend
    ax.legend()

    # Rotate x-axis labels for better readability
    plt.xticks(rotation=45)

    # Tight layout to prevent clipping of labels
    plt.tight_layout()

    return df, fig

def format_date(date_str):
    """Convert date to YYYY-MM-DD format"""
    try:
        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        return date_obj.strftime("%Y-%m-%d")
    except ValueError:
        # If the date is not in the expected format, return it as is
        return date_str

def app_interface(url1, url2, start_date, end_date):
    """Gradio interface function"""
    # Format dates
    start_date = format_date(start_date)
    end_date = format_date(end_date)

    # Get comparison results
    df, fig = compare_wiki_pages(url1, url2, start_date, end_date)

    # If there was an error, return the error message
    if "Error" in df.columns:
        return df, None

    return df, fig

# Create the Gradio interface
with gr.Blocks(title="WikiTrends Comparator") as demo:
    gr.Markdown("# WikiTrends Comparator")
    gr.Markdown("Compare pageview statistics for two Wikipedia pages over a specified date range.")

    with gr.Row():
        with gr.Column():
            url1_input = gr.Textbox(
                label="Wikipedia URL 1",
                placeholder="https://en.wikipedia.org/wiki/SpaceX_Starship"
            )
            url2_input = gr.Textbox(
                label="Wikipedia URL 2",
                placeholder="https://en.wikipedia.org/wiki/SpaceX"
            )

        with gr.Column():
            # Set default date range to last 30 days
            today = datetime.now()
            thirty_days_ago = today - timedelta(days=30)

            start_date_input = gr.Textbox(
                label="Start Date (YYYY-MM-DD)",
                value=thirty_days_ago.strftime("%Y-%m-%d")
            )
            end_date_input = gr.Textbox(
                label="End Date (YYYY-MM-DD)",
                value=today.strftime("%Y-%m-%d")
            )

    submit_btn = gr.Button("Compare")

    output_dataframe = gr.Dataframe(label="Page Views Data")
    output_plot = gr.Plot(label="Page Views Comparison")

    submit_btn.click(
        fn=app_interface,
        inputs=[url1_input, url2_input, start_date_input, end_date_input],
        outputs=[output_dataframe, output_plot]
    )

    gr.Markdown("""
    ## How to Use
    1. Enter the full URLs of two Wikipedia pages (e.g., https://en.wikipedia.org/wiki/Apple_Inc. and https://en.wikipedia.org/wiki/Samsung)
    2. Specify the date range for comparison (in YYYY-MM-DD format)
    3. Click "Compare" to see the results

    ## Examples
    - Compare SpaceX Starship vs. SpaceX
    - Compare Apple Inc. vs. Samsung
    - Compare Bitcoin vs. Ethereum
    """)

# Launch the app (when running in Colab)
demo.launch(debug=True)

